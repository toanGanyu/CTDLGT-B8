using System;

class Node
{
    public int Data;
    public int Count;
    public Node Left, Right;

    public Node(int data)
    {
        Data = data;
        Count = 1;
        Left = Right = null;
    }
}

class BinarySearchTree
{
    private Node root;

    public void Insert(int data)
    {
        root = InsertRec(root, data);
    }

    private Node InsertRec(Node root, int data)
    {
        if (root == null) return new Node(data);

        if (data < root.Data)
            root.Left = InsertRec(root.Left, data);
        else if (data > root.Data)
            root.Right = InsertRec(root.Right, data);
        else
            root.Count++; // Nếu giá trị trùng, tăng số lần xuất hiện

        return root;
    }

    public void InOrderTraversal()
    {
        Console.WriteLine("So lan xuat hien cac so:");
        InOrderRec(root);
    }

    private void InOrderRec(Node root)
    {
        if (root != null)
        {
            InOrderRec(root.Left);
            Console.WriteLine($"Gia tri: {root.Data}, So lan: {root.Count}");
            InOrderRec(root.Right);
        }
    }

    public int CountEdges()
    {
        return CountNodes(root) - 1;
    }

    private int CountNodes(Node root)
    {
        if (root == null) return 0;
        return 1 + CountNodes(root.Left) + CountNodes(root.Right);
    }
}

class Program
{
    static void Main()
    {
        BinarySearchTree bst = new BinarySearchTree();
        Random rand = new Random();

        // Thêm 10.000 số ngẫu nhiên từ 0 đến 9
        for (int i = 0; i < 10000; i++)
        {
            bst.Insert(rand.Next(0, 10));
        }

        // In kết quả
        bst.InOrderTraversal();

        // Đếm số cạnh trong cây
        Console.WriteLine($"So canh trong cay BST: {bst.CountEdges()}");
    }
}
